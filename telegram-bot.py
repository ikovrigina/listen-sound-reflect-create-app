#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Mini App "listen.sound.reflect.create"
"""

import os
import asyncio
import logging
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from supabase import create_client, Client
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_ANON_KEY')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://listen-sound-reflect-create.vercel.app/')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

class AudioHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    
    @staticmethod
    async def download_audio(bot, file_id: str) -> bytes:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –∏–∑ Telegram"""
        try:
            file = await bot.get_file(file_id)
            return await file.download_as_bytearray()
        except Exception as e:
            logger.error(f"Failed to download audio: {e}")
            raise
    
    @staticmethod
    async def upload_to_supabase(audio_data: bytes, user_id: int, audio_type: str) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ –≤ Supabase Storage"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().isoformat().replace(':', '-')
            file_name = f"{audio_type}_{user_id}_{timestamp}.ogg"
            file_path = f"audio/{file_name}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
            result = supabase.storage.from_("audio").upload(
                file_path, 
                audio_data,
                file_options={"content-type": "audio/ogg"}
            )
            
            if result.error:
                raise Exception(f"Upload error: {result.error}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
            public_url = supabase.storage.from_("audio").get_public_url(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            db_result = supabase.table('audio_files').insert({
                'file_name': file_name,
                'file_path': file_path,
                'file_url': public_url.data.get('publicUrl'),
                'file_size': len(audio_data),
                'mime_type': 'audio/ogg',
                'audio_type': audio_type,
                'user_id': str(user_id),
                'created_at': datetime.now().isoformat()
            }).execute()
            
            return {
                'file_name': file_name,
                'public_url': public_url.data.get('publicUrl'),
                'audio_file_id': db_result.data[0]['id'] if db_result.data else None
            }
            
        except Exception as e:
            logger.error(f"Failed to upload to Supabase: {e}")
            raise

async def start_command(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Mini App
    keyboard = [
        [InlineKeyboardButton(
            "üéµ Open Mini App", 
            web_app={"url": WEBAPP_URL}
        )],
        [InlineKeyboardButton(
            "‚ÑπÔ∏è About Deep Listening", 
            callback_data="about"
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
üéµ *Welcome to Listen.Sound.Reflect.Create*

Hello {user.first_name}! This bot helps you explore Deep Listening practices inspired by Pauline Oliveros.

*How it works:*
‚Ä¢ Open the Mini App to start a session
‚Ä¢ Follow the Listen ‚Üí Sound ‚Üí Reflect ‚Üí Create flow
‚Ä¢ Send voice messages when prompted
‚Ä¢ Your audio will be saved and processed

*Ready to begin your sonic journey?*
"""
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def about_callback(update: Update, context) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Deep Listening"""
    query = update.callback_query
    await query.answer()
    
    about_text = """
üéº *About Deep Listening*

Deep Listening is a practice developed by composer Pauline Oliveros. It involves:

‚Ä¢ *Listening* to the environment around you
‚Ä¢ *Sounding* in response to what you hear  
‚Ä¢ *Reflecting* on the experience
‚Ä¢ *Creating* new sonic possibilities

This practice enhances awareness, creativity, and connection with sound environments.

*"Deep Listening is listening in every possible way to everything possible to hear no matter what you are doing."* - Pauline Oliveros
"""
    
    keyboard = [[InlineKeyboardButton("üéµ Start Session", web_app={"url": WEBAPP_URL})]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        about_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_voice_message(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    voice = update.message.voice
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        processing_msg = await update.message.reply_text("üé§ Processing your audio...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_data = await AudioHandler.download_audio(context.bot, voice.file_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'reflection')
        audio_type = 'reflection'  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase
        result = await AudioHandler.upload_to_supabase(audio_data, user.id, audio_type)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"""
‚úÖ *Audio saved successfully!*

üìÅ File: `{result['file_name']}`
üîó URL: [Listen]({result['public_url']})
üíæ Size: {len(audio_data)} bytes

Your audio is now part of your Deep Listening journey.
"""
        
        keyboard = [[InlineKeyboardButton("üéµ Continue in Mini App", web_app={"url": WEBAPP_URL})]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await processing_msg.edit_text(
            success_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"Voice processing error: {e}")
        await update.message.reply_text(
            "‚ùå Sorry, there was an error processing your audio. Please try again."
        )

async def handle_audio_message(update: Update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    await handle_voice_message(update, context)

async def help_command(update: Update, context) -> None:
    """–ü–æ–º–æ—â—å"""
    help_text = """
üéµ *Listen.Sound.Reflect.Create Bot*

*Commands:*
‚Ä¢ `/start` - Begin your Deep Listening journey
‚Ä¢ `/help` - Show this help message

*How to use:*
1. Open the Mini App to start a session
2. Follow the guided experience
3. Send voice messages when prompted
4. Your audio will be automatically saved

*Voice Messages:*
Send voice messages anytime to save them as part of your sonic exploration.

*Need help?* The Mini App will guide you through each step of the Deep Listening process.
"""
    
    keyboard = [[InlineKeyboardButton("üéµ Open Mini App", web_app={"url": WEBAPP_URL})]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not set!")
        return
    
    if not SUPABASE_URL or not SUPABASE_KEY:
        logger.error("Supabase credentials not set!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(about_callback, pattern="about"))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
